### YamlMime:ManagedReference
items:
- uid: com.eyerunnman.patterns.ServiceLocator
  commentId: T:com.eyerunnman.patterns.ServiceLocator
  id: ServiceLocator
  parent: com.eyerunnman.patterns
  children:
  - com.eyerunnman.patterns.ServiceLocator.Current
  - com.eyerunnman.patterns.ServiceLocator.Get``1
  - com.eyerunnman.patterns.ServiceLocator.Register``1(``0,System.Boolean)
  - com.eyerunnman.patterns.ServiceLocator.ServiceNotRegisteredException``1
  - com.eyerunnman.patterns.ServiceLocator.Unregister``1
  langs:
  - csharp
  - vb
  name: ServiceLocator
  nameWithType: ServiceLocator
  fullName: com.eyerunnman.patterns.ServiceLocator
  type: Class
  source:
    id: ServiceLocator
    path: ''
    startLine: 85
  assemblies:
  - cs.temp.dll
  namespace: com.eyerunnman.patterns
  summary: "\nSimple service locator for <see cref=\"!:IGameService\"></see> instances.\n"
  example: []
  syntax:
    content: public class ServiceLocator
    content.vb: Public Class ServiceLocator
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: com.eyerunnman.patterns.ServiceLocator.Current
  commentId: P:com.eyerunnman.patterns.ServiceLocator.Current
  id: Current
  parent: com.eyerunnman.patterns.ServiceLocator
  langs:
  - csharp
  - vb
  name: Current
  nameWithType: ServiceLocator.Current
  fullName: com.eyerunnman.patterns.ServiceLocator.Current
  type: Property
  source:
    id: Current
    path: ''
    startLine: 97
  assemblies:
  - cs.temp.dll
  namespace: com.eyerunnman.patterns
  summary: "\nGets the currently active service locator instance.\n"
  example: []
  syntax:
    content: public static ServiceLocator Current { get; }
    parameters: []
    return:
      type: com.eyerunnman.patterns.ServiceLocator
    content.vb: Public Shared ReadOnly Property Current As ServiceLocator
  overload: com.eyerunnman.patterns.ServiceLocator.Current*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: com.eyerunnman.patterns.ServiceLocator.Get``1
  commentId: M:com.eyerunnman.patterns.ServiceLocator.Get``1
  id: Get``1
  parent: com.eyerunnman.patterns.ServiceLocator
  langs:
  - csharp
  - vb
  name: Get<T>()
  nameWithType: ServiceLocator.Get<T>()
  fullName: com.eyerunnman.patterns.ServiceLocator.Get<T>()
  type: Method
  source:
    id: Get
    path: ''
    startLine: 124
  assemblies:
  - cs.temp.dll
  namespace: com.eyerunnman.patterns
  summary: "\nGets the service instance of the given type.\n"
  example: []
  syntax:
    content: >-
      public T Get<T>()

          where T : IGameService
    typeParameters:
    - id: T
      description: The type of the service to lookup.
    return:
      type: '{T}'
      description: The service instance.
    content.vb: Public Function Get(Of T As IGameService) As T
  overload: com.eyerunnman.patterns.ServiceLocator.Get*
  nameWithType.vb: ServiceLocator.Get(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: com.eyerunnman.patterns.ServiceLocator.Get(Of T)()
  name.vb: Get(Of T)()
- uid: com.eyerunnman.patterns.ServiceLocator.Register``1(``0,System.Boolean)
  commentId: M:com.eyerunnman.patterns.ServiceLocator.Register``1(``0,System.Boolean)
  id: Register``1(``0,System.Boolean)
  parent: com.eyerunnman.patterns.ServiceLocator
  langs:
  - csharp
  - vb
  name: Register<T>(T, Boolean)
  nameWithType: ServiceLocator.Register<T>(T, Boolean)
  fullName: com.eyerunnman.patterns.ServiceLocator.Register<T>(T, System.Boolean)
  type: Method
  source:
    id: Register
    path: ''
    startLine: 141
  assemblies:
  - cs.temp.dll
  namespace: com.eyerunnman.patterns
  summary: "\nRegisters the service with the current service locator.\n"
  example: []
  syntax:
    content: >-
      public void Register<T>(T service, bool overrideService = false)

          where T : IGameService
    parameters:
    - id: service
      type: '{T}'
      description: service instance.
    - id: overrideService
      type: System.Boolean
    typeParameters:
    - id: T
      description: Service type.
    content.vb: Public Sub Register(Of T As IGameService)(service As T, overrideService As Boolean = False)
  overload: com.eyerunnman.patterns.ServiceLocator.Register*
  nameWithType.vb: ServiceLocator.Register(Of T)(T, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: com.eyerunnman.patterns.ServiceLocator.Register(Of T)(T, System.Boolean)
  name.vb: Register(Of T)(T, Boolean)
- uid: com.eyerunnman.patterns.ServiceLocator.Unregister``1
  commentId: M:com.eyerunnman.patterns.ServiceLocator.Unregister``1
  id: Unregister``1
  parent: com.eyerunnman.patterns.ServiceLocator
  langs:
  - csharp
  - vb
  name: Unregister<T>()
  nameWithType: ServiceLocator.Unregister<T>()
  fullName: com.eyerunnman.patterns.ServiceLocator.Unregister<T>()
  type: Method
  source:
    id: Unregister
    path: ''
    startLine: 179
  assemblies:
  - cs.temp.dll
  namespace: com.eyerunnman.patterns
  summary: "\nUnregisters the service from the current service locator.\n"
  example: []
  syntax:
    content: >-
      public void Unregister<T>()

          where T : IGameService
    typeParameters:
    - id: T
      description: Service type.
    content.vb: Public Sub Unregister(Of T As IGameService)
  overload: com.eyerunnman.patterns.ServiceLocator.Unregister*
  nameWithType.vb: ServiceLocator.Unregister(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: com.eyerunnman.patterns.ServiceLocator.Unregister(Of T)()
  name.vb: Unregister(Of T)()
- uid: com.eyerunnman.patterns.ServiceLocator.ServiceNotRegisteredException``1
  commentId: M:com.eyerunnman.patterns.ServiceLocator.ServiceNotRegisteredException``1
  id: ServiceNotRegisteredException``1
  parent: com.eyerunnman.patterns.ServiceLocator
  langs:
  - csharp
  - vb
  name: ServiceNotRegisteredException<T>()
  nameWithType: ServiceLocator.ServiceNotRegisteredException<T>()
  fullName: com.eyerunnman.patterns.ServiceLocator.ServiceNotRegisteredException<T>()
  type: Method
  source:
    id: ServiceNotRegisteredException
    path: ''
    startLine: 195
  assemblies:
  - cs.temp.dll
  namespace: com.eyerunnman.patterns
  syntax:
    content: public static Exception ServiceNotRegisteredException<T>()
    typeParameters:
    - id: T
    return:
      type: Exception
    content.vb: Public Shared Function ServiceNotRegisteredException(Of T) As Exception
  overload: com.eyerunnman.patterns.ServiceLocator.ServiceNotRegisteredException*
  nameWithType.vb: ServiceLocator.ServiceNotRegisteredException(Of T)()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: com.eyerunnman.patterns.ServiceLocator.ServiceNotRegisteredException(Of T)()
  name.vb: ServiceNotRegisteredException(Of T)()
references:
- uid: com.eyerunnman.patterns
  commentId: N:com.eyerunnman.patterns
  name: com.eyerunnman.patterns
  nameWithType: com.eyerunnman.patterns
  fullName: com.eyerunnman.patterns
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: com.eyerunnman.patterns.ServiceLocator.Current*
  commentId: Overload:com.eyerunnman.patterns.ServiceLocator.Current
  name: Current
  nameWithType: ServiceLocator.Current
  fullName: com.eyerunnman.patterns.ServiceLocator.Current
- uid: com.eyerunnman.patterns.ServiceLocator
  commentId: T:com.eyerunnman.patterns.ServiceLocator
  parent: com.eyerunnman.patterns
  name: ServiceLocator
  nameWithType: ServiceLocator
  fullName: com.eyerunnman.patterns.ServiceLocator
- uid: com.eyerunnman.patterns.ServiceLocator.Get*
  commentId: Overload:com.eyerunnman.patterns.ServiceLocator.Get
  name: Get
  nameWithType: ServiceLocator.Get
  fullName: com.eyerunnman.patterns.ServiceLocator.Get
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: com.eyerunnman.patterns.ServiceLocator.Register*
  commentId: Overload:com.eyerunnman.patterns.ServiceLocator.Register
  name: Register
  nameWithType: ServiceLocator.Register
  fullName: com.eyerunnman.patterns.ServiceLocator.Register
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: com.eyerunnman.patterns.ServiceLocator.Unregister*
  commentId: Overload:com.eyerunnman.patterns.ServiceLocator.Unregister
  name: Unregister
  nameWithType: ServiceLocator.Unregister
  fullName: com.eyerunnman.patterns.ServiceLocator.Unregister
- uid: com.eyerunnman.patterns.ServiceLocator.ServiceNotRegisteredException*
  commentId: Overload:com.eyerunnman.patterns.ServiceLocator.ServiceNotRegisteredException
  name: ServiceNotRegisteredException
  nameWithType: ServiceLocator.ServiceNotRegisteredException
  fullName: com.eyerunnman.patterns.ServiceLocator.ServiceNotRegisteredException
- uid: Exception
  commentId: '!:Exception'
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: Exception
